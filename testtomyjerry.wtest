import tomyjerry.*

// Completar con los test solicitados en cada etapa
describe "group of tests for tomyjerry" {

    test "al inicio, la velocidad máxima de Tom es 10 (su energía es 50)" {
        assert.equals(10, tom.velocidadMaxima())
        assert.equals(50, tom.energia())
    }

    test "si come a Jerry, la velocidad máxima pasa a ser 15.2 (su energía es 102)" {
        // act
        tom.comer(jerry)

        // assert
        assert.equals(15.2, tom.velocidadMaxima())
        assert.equals(102, tom.energia())
    }

    test "si corre 24 metros, entonces su velocidad máxima pasa a ser 14 (su energía es 90)" {
        // arrange
        tom.comer(jerry)

        // act
        tom.correr(24)

        // assert
        assert.equals(14, tom.velocidadMaxima())
        assert.equals(90, tom.energia())
    }
    
   test "si come a Nibbles, pasa a tener de velocidad máxima 18.7 (su energía es 137)" {
        // arrange
        tom.comer(jerry)
        tom.correr(24)

        //act
        tom.comer(nibbles)

        // assert
        assert.equals(18.7, tom.velocidadMaxima())
        assert.equals(137, tom.energia())
    }

   test "si jerry cumple años (3 años de edad), y luego tom lo vuelve a comer, pasaría a tener 25.9 (su energia es 209)" {
        // arrange
        tom.comer(jerry)
        tom.correr(24)
        tom.comer(nibbles)
        jerry.cumplirAnios()

        //act
        tom.comer(jerry)

        // assert
        assert.equals(25.9, tom.velocidadMaxima())
        assert.equals(209, tom.energia())
    }

    test "si corre 38 metros su velocidad pasa a ser 24 (su energia es 190)" {
        // arrange
        tom.comer(jerry)
        tom.correr(24)
        tom.comer(nibbles)
        jerry.cumplirAnios()
        tom.comer(jerry)

        //act
        tom.correr(38)

        // assert
        assert.equals(24, tom.velocidadMaxima())
        assert.equals(190, tom.energia())
    }   

    test "tom puede cazar sin recorre 100 metros de distancia y cuando tiene 50 de energia" {
        assert.that(tom.puedeCazar(100))
    }

    test "tom NO puede cazar sin recorre 101 metros de distancia y cuando tiene 50 de energia" {
        assert.notThat(tom.puedeCazar(101))
    }
    
    test "tom puede comer a jerry si se encuentra a menos de 100 metros y la energia de tom es de 50" {
        //act
        tom.puedeCazar(100, jerry)

        //assert
        assert.equals(52, tom.energia())
        assert.equals(10.2,tom.velocidadMaxima())
        assert.notThat( tom.puedeCazar(105)  )
    }


    test "tom No puede comer a jerry si se encuentra a menos de 101 metros y la energia de tom es de 50" {
        //act
        tom.puedeCazar(101, jerry)

        //assert
        assert.equals(50, tom.energia())
        assert.equals(10,tom.velocidadMaxima())
        assert.that( tom.puedeCazar(100)  )
    }

}


